package comomns

/**
  * Generated by Scrooge
  *   version: 18.3.0
  *   rev: 8a7bf1c411e75e79daf75452a5203a2ce4dee2ec
  *   built at: 20180306-112105
  */
package com.ag.game.quiz.thriftscala

import com.twitter.io.Buf
import com.twitter.scrooge.{
  HasThriftStructCodec3,
  LazyTProtocol,
  TFieldBlob,
  ThriftException,
  ThriftStruct,
  ThriftStructCodec3,
  ThriftStructFieldInfo,
  ThriftStructMetaData,
  ThriftUtil
}
import org.apache.thrift.protocol._
import org.apache.thrift.transport.{TMemoryBuffer, TTransport, TIOStreamTransport}
import java.io.ByteArrayInputStream
import java.nio.ByteBuffer
import java.util.Arrays
import java.util.concurrent.atomic.AtomicInteger
import scala.collection.immutable.{Map => immutable$Map}
import scala.collection.mutable.Builder
import scala.collection.mutable.{
  ArrayBuffer => mutable$ArrayBuffer, Buffer => mutable$Buffer,
  HashMap => mutable$HashMap, HashSet => mutable$HashSet}
import scala.collection.{Map, Set}


object User extends ThriftStructCodec3[User] {
  val NoPassthroughFields: immutable$Map[Short, TFieldBlob] = immutable$Map.empty[Short, TFieldBlob]
  val Struct = new TStruct("User")
  val IdField = new TField("id", TType.I64, 1)
  val IdFieldManifest = implicitly[Manifest[Long]]
  val UuidField = new TField("uuid", TType.STRING, 2)
  val UuidFieldManifest = implicitly[Manifest[String]]
  val OpenIdField = new TField("openId", TType.STRING, 3)
  val OpenIdFieldManifest = implicitly[Manifest[String]]
  val AppOpendIdField = new TField("appOpendId", TType.STRING, 4)
  val AppOpendIdFieldManifest = implicitly[Manifest[String]]
  val H5OpendIdField = new TField("h5OpendId", TType.STRING, 5)
  val H5OpendIdFieldManifest = implicitly[Manifest[String]]
  val UnionIdField = new TField("unionId", TType.STRING, 6)
  val UnionIdFieldManifest = implicitly[Manifest[String]]
  val CreatedAtField = new TField("createdAt", TType.I64, 7)
  val CreatedAtFieldManifest = implicitly[Manifest[Long]]
  val UpdatedAtField = new TField("updatedAt", TType.I64, 8)
  val UpdatedAtFieldManifest = implicitly[Manifest[Long]]
  val StatusField = new TField("status", TType.ENUM, 9)
  val StatusFieldI32 = new TField("status", TType.I32, 9)
  val StatusFieldManifest = implicitly[Manifest[com.ag.game.quiz.idl.thriftscala.UserStatus]]
  val NickNameField = new TField("nickName", TType.STRING, 10)
  val NickNameFieldManifest = implicitly[Manifest[String]]
  val GenderField = new TField("gender", TType.ENUM, 11)
  val GenderFieldI32 = new TField("gender", TType.I32, 11)
  val GenderFieldManifest = implicitly[Manifest[com.ag.game.quiz.idl.thriftscala.Gender]]
  val CityField = new TField("city", TType.STRING, 12)
  val CityFieldManifest = implicitly[Manifest[String]]
  val ProvinceField = new TField("province", TType.STRING, 13)
  val ProvinceFieldManifest = implicitly[Manifest[String]]
  val CountryField = new TField("country", TType.STRING, 14)
  val CountryFieldManifest = implicitly[Manifest[String]]
  val AvatarUrlField = new TField("avatarUrl", TType.STRING, 15)
  val AvatarUrlFieldManifest = implicitly[Manifest[String]]
  val PhoneNumberField = new TField("phoneNumber", TType.STRING, 16)
  val PhoneNumberFieldManifest = implicitly[Manifest[String]]
  val FriendIdsField = new TField("friendIds", TType.LIST, 17)
  val FriendIdsFieldManifest = implicitly[Manifest[Seq[Long]]]
  val SourceField = new TField("source", TType.ENUM, 18)
  val SourceFieldI32 = new TField("source", TType.I32, 18)
  val SourceFieldManifest = implicitly[Manifest[com.ag.game.quiz.idl.thriftscala.UserSource]]
  val FromTypeField = new TField("fromType", TType.ENUM, 19)
  val FromTypeFieldI32 = new TField("fromType", TType.I32, 19)
  val FromTypeFieldManifest = implicitly[Manifest[com.ag.game.quiz.idl.thriftscala.UserFromType]]
  val CodeField = new TField("code", TType.STRING, 20)
  val CodeFieldManifest = implicitly[Manifest[String]]
  val RtypeField = new TField("rtype", TType.I32, 21)
  val RtypeFieldManifest = implicitly[Manifest[Int]]

  /**
    * Field information in declaration order.
    */
  lazy val fieldInfos: scala.List[ThriftStructFieldInfo] = scala.List[ThriftStructFieldInfo](
    new ThriftStructFieldInfo(
      IdField,
      false,
      true,
      IdFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      None
    ),
    new ThriftStructFieldInfo(
      UuidField,
      false,
      true,
      UuidFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      None
    ),
    new ThriftStructFieldInfo(
      OpenIdField,
      false,
      true,
      OpenIdFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      None
    ),
    new ThriftStructFieldInfo(
      AppOpendIdField,
      false,
      true,
      AppOpendIdFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      None
    ),
    new ThriftStructFieldInfo(
      H5OpendIdField,
      false,
      true,
      H5OpendIdFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      None
    ),
    new ThriftStructFieldInfo(
      UnionIdField,
      false,
      true,
      UnionIdFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      None
    ),
    new ThriftStructFieldInfo(
      CreatedAtField,
      false,
      true,
      CreatedAtFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      None
    ),
    new ThriftStructFieldInfo(
      UpdatedAtField,
      false,
      true,
      UpdatedAtFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      None
    ),
    new ThriftStructFieldInfo(
      StatusField,
      false,
      true,
      StatusFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      None
    ),
    new ThriftStructFieldInfo(
      NickNameField,
      false,
      true,
      NickNameFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      None
    ),
    new ThriftStructFieldInfo(
      GenderField,
      false,
      true,
      GenderFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      None
    ),
    new ThriftStructFieldInfo(
      CityField,
      false,
      true,
      CityFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      None
    ),
    new ThriftStructFieldInfo(
      ProvinceField,
      false,
      true,
      ProvinceFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      None
    ),
    new ThriftStructFieldInfo(
      CountryField,
      false,
      true,
      CountryFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      None
    ),
    new ThriftStructFieldInfo(
      AvatarUrlField,
      false,
      true,
      AvatarUrlFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      None
    ),
    new ThriftStructFieldInfo(
      PhoneNumberField,
      false,
      true,
      PhoneNumberFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      None
    ),
    new ThriftStructFieldInfo(
      FriendIdsField,
      false,
      true,
      FriendIdsFieldManifest,
      _root_.scala.None,
      _root_.scala.Some(implicitly[Manifest[Long]]),
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      None
    ),
    new ThriftStructFieldInfo(
      SourceField,
      false,
      true,
      SourceFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      None
    ),
    new ThriftStructFieldInfo(
      FromTypeField,
      false,
      true,
      FromTypeFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      None
    ),
    new ThriftStructFieldInfo(
      CodeField,
      false,
      true,
      CodeFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      None
    ),
    new ThriftStructFieldInfo(
      RtypeField,
      false,
      true,
      RtypeFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String],
      None
    )
  )

  lazy val structAnnotations: immutable$Map[String, String] =
    immutable$Map.empty[String, String]

  /**
    * Checks that all required fields are non-null.
    */
  def validate(_item: User): Unit = {
    if (_item.uuid == null) throw new TProtocolException("Required field uuid cannot be null")
    if (_item.openId == null) throw new TProtocolException("Required field openId cannot be null")
    if (_item.appOpendId == null) throw new TProtocolException("Required field appOpendId cannot be null")
    if (_item.h5OpendId == null) throw new TProtocolException("Required field h5OpendId cannot be null")
    if (_item.unionId == null) throw new TProtocolException("Required field unionId cannot be null")
    if (_item.status == null) throw new TProtocolException("Required field status cannot be null")
    if (_item.nickName == null) throw new TProtocolException("Required field nickName cannot be null")
    if (_item.gender == null) throw new TProtocolException("Required field gender cannot be null")
    if (_item.city == null) throw new TProtocolException("Required field city cannot be null")
    if (_item.province == null) throw new TProtocolException("Required field province cannot be null")
    if (_item.country == null) throw new TProtocolException("Required field country cannot be null")
    if (_item.avatarUrl == null) throw new TProtocolException("Required field avatarUrl cannot be null")
    if (_item.phoneNumber == null) throw new TProtocolException("Required field phoneNumber cannot be null")
    if (_item.friendIds == null) throw new TProtocolException("Required field friendIds cannot be null")
    if (_item.source == null) throw new TProtocolException("Required field source cannot be null")
    if (_item.fromType == null) throw new TProtocolException("Required field fromType cannot be null")
    if (_item.code == null) throw new TProtocolException("Required field code cannot be null")
  }

  def withoutPassthroughFields(original: User): User =
    new Immutable(
      id =
        {
          val field = original.id
          field
        },
      uuid =
        {
          val field = original.uuid
          field
        },
      openId =
        {
          val field = original.openId
          field
        },
      appOpendId =
        {
          val field = original.appOpendId
          field
        },
      h5OpendId =
        {
          val field = original.h5OpendId
          field
        },
      unionId =
        {
          val field = original.unionId
          field
        },
      createdAt =
        {
          val field = original.createdAt
          field
        },
      updatedAt =
        {
          val field = original.updatedAt
          field
        },
      status =
        {
          val field = original.status
          field
        },
      nickName =
        {
          val field = original.nickName
          field
        },
      gender =
        {
          val field = original.gender
          field
        },
      city =
        {
          val field = original.city
          field
        },
      province =
        {
          val field = original.province
          field
        },
      country =
        {
          val field = original.country
          field
        },
      avatarUrl =
        {
          val field = original.avatarUrl
          field
        },
      phoneNumber =
        {
          val field = original.phoneNumber
          field
        },
      friendIds =
        {
          val field = original.friendIds
          field.map { field =>
            field
          }
        },
      source =
        {
          val field = original.source
          field
        },
      fromType =
        {
          val field = original.fromType
          field
        },
      code =
        {
          val field = original.code
          field
        },
      rtype =
        {
          val field = original.rtype
          field
        }
    )

  override def encode(_item: User, _oproto: TProtocol): Unit = {
    _item.write(_oproto)
  }


  private[this] def lazyDecode(_iprot: LazyTProtocol): User = {

    var id: Long = 0L
    var _got_id = false
    var uuidOffset: Int = -1
    var _got_uuid = false
    var openIdOffset: Int = -1
    var _got_openId = false
    var appOpendIdOffset: Int = -1
    var _got_appOpendId = false
    var h5OpendIdOffset: Int = -1
    var _got_h5OpendId = false
    var unionIdOffset: Int = -1
    var _got_unionId = false
    var createdAt: Long = 0L
    var _got_createdAt = false
    var updatedAt: Long = 0L
    var _got_updatedAt = false
    var status: com.ag.game.quiz.idl.thriftscala.UserStatus = null
    var _got_status = false
    var nickNameOffset: Int = -1
    var _got_nickName = false
    var gender: com.ag.game.quiz.idl.thriftscala.Gender = null
    var _got_gender = false
    var cityOffset: Int = -1
    var _got_city = false
    var provinceOffset: Int = -1
    var _got_province = false
    var countryOffset: Int = -1
    var _got_country = false
    var avatarUrlOffset: Int = -1
    var _got_avatarUrl = false
    var phoneNumberOffset: Int = -1
    var _got_phoneNumber = false
    var friendIds: Seq[Long] = Seq[Long]()
    var _got_friendIds = false
    var source: com.ag.game.quiz.idl.thriftscala.UserSource = null
    var _got_source = false
    var fromType: com.ag.game.quiz.idl.thriftscala.UserFromType = null
    var _got_fromType = false
    var codeOffset: Int = -1
    var _got_code = false
    var rtype: Int = 0
    var _got_rtype = false

    var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
    var _done = false
    val _start_offset = _iprot.offset

    _iprot.readStructBegin()
    while (!_done) {
      val _field = _iprot.readFieldBegin()
      if (_field.`type` == TType.STOP) {
        _done = true
      } else {
        _field.id match {
          case 1 =>
            _field.`type` match {
              case TType.I64 =>

                id = readIdValue(_iprot)
                _got_id = true
              case _actualType =>
                val _expectedType = TType.I64
                throw new TProtocolException(
                  "Received wrong type for field 'id' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 2 =>
            _field.`type` match {
              case TType.STRING =>
                uuidOffset = _iprot.offsetSkipString

                _got_uuid = true
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'uuid' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 3 =>
            _field.`type` match {
              case TType.STRING =>
                openIdOffset = _iprot.offsetSkipString

                _got_openId = true
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'openId' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 4 =>
            _field.`type` match {
              case TType.STRING =>
                appOpendIdOffset = _iprot.offsetSkipString

                _got_appOpendId = true
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'appOpendId' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 5 =>
            _field.`type` match {
              case TType.STRING =>
                h5OpendIdOffset = _iprot.offsetSkipString

                _got_h5OpendId = true
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'h5OpendId' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 6 =>
            _field.`type` match {
              case TType.STRING =>
                unionIdOffset = _iprot.offsetSkipString

                _got_unionId = true
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'unionId' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 7 =>
            _field.`type` match {
              case TType.I64 =>

                createdAt = readCreatedAtValue(_iprot)
                _got_createdAt = true
              case _actualType =>
                val _expectedType = TType.I64
                throw new TProtocolException(
                  "Received wrong type for field 'createdAt' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 8 =>
            _field.`type` match {
              case TType.I64 =>

                updatedAt = readUpdatedAtValue(_iprot)
                _got_updatedAt = true
              case _actualType =>
                val _expectedType = TType.I64
                throw new TProtocolException(
                  "Received wrong type for field 'updatedAt' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 9 =>
            _field.`type` match {
              case TType.I32 | TType.ENUM =>

                status = readStatusValue(_iprot)
                _got_status = true
              case _actualType =>
                val _expectedType = TType.ENUM
                throw new TProtocolException(
                  "Received wrong type for field 'status' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 10 =>
            _field.`type` match {
              case TType.STRING =>
                nickNameOffset = _iprot.offsetSkipString

                _got_nickName = true
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'nickName' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 11 =>
            _field.`type` match {
              case TType.I32 | TType.ENUM =>

                gender = readGenderValue(_iprot)
                _got_gender = true
              case _actualType =>
                val _expectedType = TType.ENUM
                throw new TProtocolException(
                  "Received wrong type for field 'gender' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 12 =>
            _field.`type` match {
              case TType.STRING =>
                cityOffset = _iprot.offsetSkipString

                _got_city = true
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'city' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 13 =>
            _field.`type` match {
              case TType.STRING =>
                provinceOffset = _iprot.offsetSkipString

                _got_province = true
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'province' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 14 =>
            _field.`type` match {
              case TType.STRING =>
                countryOffset = _iprot.offsetSkipString

                _got_country = true
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'country' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 15 =>
            _field.`type` match {
              case TType.STRING =>
                avatarUrlOffset = _iprot.offsetSkipString

                _got_avatarUrl = true
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'avatarUrl' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 16 =>
            _field.`type` match {
              case TType.STRING =>
                phoneNumberOffset = _iprot.offsetSkipString

                _got_phoneNumber = true
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'phoneNumber' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 17 =>
            _field.`type` match {
              case TType.LIST =>

                friendIds = readFriendIdsValue(_iprot)
                _got_friendIds = true
              case _actualType =>
                val _expectedType = TType.LIST
                throw new TProtocolException(
                  "Received wrong type for field 'friendIds' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 18 =>
            _field.`type` match {
              case TType.I32 | TType.ENUM =>

                source = readSourceValue(_iprot)
                _got_source = true
              case _actualType =>
                val _expectedType = TType.ENUM
                throw new TProtocolException(
                  "Received wrong type for field 'source' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 19 =>
            _field.`type` match {
              case TType.I32 | TType.ENUM =>

                fromType = readFromTypeValue(_iprot)
                _got_fromType = true
              case _actualType =>
                val _expectedType = TType.ENUM
                throw new TProtocolException(
                  "Received wrong type for field 'fromType' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 20 =>
            _field.`type` match {
              case TType.STRING =>
                codeOffset = _iprot.offsetSkipString

                _got_code = true
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'code' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 21 =>
            _field.`type` match {
              case TType.I32 =>

                rtype = readRtypeValue(_iprot)
                _got_rtype = true
              case _actualType =>
                val _expectedType = TType.I32
                throw new TProtocolException(
                  "Received wrong type for field 'rtype' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case _ =>
            if (_passthroughFields == null)
              _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
            _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
        }
        _iprot.readFieldEnd()
      }
    }
    _iprot.readStructEnd()

    if (!_got_id) throw new TProtocolException("Required field 'id' was not found in serialized data for struct User")
    if (!_got_uuid) throw new TProtocolException("Required field 'uuid' was not found in serialized data for struct User")
    if (!_got_openId) throw new TProtocolException("Required field 'openId' was not found in serialized data for struct User")
    if (!_got_appOpendId) throw new TProtocolException("Required field 'appOpendId' was not found in serialized data for struct User")
    if (!_got_h5OpendId) throw new TProtocolException("Required field 'h5OpendId' was not found in serialized data for struct User")
    if (!_got_unionId) throw new TProtocolException("Required field 'unionId' was not found in serialized data for struct User")
    if (!_got_createdAt) throw new TProtocolException("Required field 'createdAt' was not found in serialized data for struct User")
    if (!_got_updatedAt) throw new TProtocolException("Required field 'updatedAt' was not found in serialized data for struct User")
    if (!_got_status) throw new TProtocolException("Required field 'status' was not found in serialized data for struct User")
    if (!_got_nickName) throw new TProtocolException("Required field 'nickName' was not found in serialized data for struct User")
    if (!_got_gender) throw new TProtocolException("Required field 'gender' was not found in serialized data for struct User")
    if (!_got_city) throw new TProtocolException("Required field 'city' was not found in serialized data for struct User")
    if (!_got_province) throw new TProtocolException("Required field 'province' was not found in serialized data for struct User")
    if (!_got_country) throw new TProtocolException("Required field 'country' was not found in serialized data for struct User")
    if (!_got_avatarUrl) throw new TProtocolException("Required field 'avatarUrl' was not found in serialized data for struct User")
    if (!_got_phoneNumber) throw new TProtocolException("Required field 'phoneNumber' was not found in serialized data for struct User")
    if (!_got_friendIds) throw new TProtocolException("Required field 'friendIds' was not found in serialized data for struct User")
    if (!_got_source) throw new TProtocolException("Required field 'source' was not found in serialized data for struct User")
    if (!_got_fromType) throw new TProtocolException("Required field 'fromType' was not found in serialized data for struct User")
    if (!_got_code) throw new TProtocolException("Required field 'code' was not found in serialized data for struct User")
    if (!_got_rtype) throw new TProtocolException("Required field 'rtype' was not found in serialized data for struct User")
    new LazyImmutable(
      _iprot,
      _iprot.buffer,
      _start_offset,
      _iprot.offset,
      id,
      uuidOffset,
      openIdOffset,
      appOpendIdOffset,
      h5OpendIdOffset,
      unionIdOffset,
      createdAt,
      updatedAt,
      status,
      nickNameOffset,
      gender,
      cityOffset,
      provinceOffset,
      countryOffset,
      avatarUrlOffset,
      phoneNumberOffset,
      friendIds,
      source,
      fromType,
      codeOffset,
      rtype,
      if (_passthroughFields == null)
        NoPassthroughFields
      else
        _passthroughFields.result()
    )
  }

  override def decode(_iprot: TProtocol): User =
    _iprot match {
      case i: LazyTProtocol => lazyDecode(i)
      case i => eagerDecode(i)
    }

  private[thriftscala] def eagerDecode(_iprot: TProtocol): User = {
    var id: Long = 0L
    var _got_id = false
    var uuid: String = null
    var _got_uuid = false
    var openId: String = null
    var _got_openId = false
    var appOpendId: String = null
    var _got_appOpendId = false
    var h5OpendId: String = null
    var _got_h5OpendId = false
    var unionId: String = null
    var _got_unionId = false
    var createdAt: Long = 0L
    var _got_createdAt = false
    var updatedAt: Long = 0L
    var _got_updatedAt = false
    var status: com.ag.game.quiz.idl.thriftscala.UserStatus = null
    var _got_status = false
    var nickName: String = null
    var _got_nickName = false
    var gender: com.ag.game.quiz.idl.thriftscala.Gender = null
    var _got_gender = false
    var city: String = null
    var _got_city = false
    var province: String = null
    var _got_province = false
    var country: String = null
    var _got_country = false
    var avatarUrl: String = null
    var _got_avatarUrl = false
    var phoneNumber: String = null
    var _got_phoneNumber = false
    var friendIds: Seq[Long] = Seq[Long]()
    var _got_friendIds = false
    var source: com.ag.game.quiz.idl.thriftscala.UserSource = null
    var _got_source = false
    var fromType: com.ag.game.quiz.idl.thriftscala.UserFromType = null
    var _got_fromType = false
    var code: String = null
    var _got_code = false
    var rtype: Int = 0
    var _got_rtype = false
    var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
    var _done = false

    _iprot.readStructBegin()
    while (!_done) {
      val _field = _iprot.readFieldBegin()
      if (_field.`type` == TType.STOP) {
        _done = true
      } else {
        _field.id match {
          case 1 =>
            _field.`type` match {
              case TType.I64 =>
                id = readIdValue(_iprot)
                _got_id = true
              case _actualType =>
                val _expectedType = TType.I64
                throw new TProtocolException(
                  "Received wrong type for field 'id' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 2 =>
            _field.`type` match {
              case TType.STRING =>
                uuid = readUuidValue(_iprot)
                _got_uuid = true
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'uuid' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 3 =>
            _field.`type` match {
              case TType.STRING =>
                openId = readOpenIdValue(_iprot)
                _got_openId = true
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'openId' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 4 =>
            _field.`type` match {
              case TType.STRING =>
                appOpendId = readAppOpendIdValue(_iprot)
                _got_appOpendId = true
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'appOpendId' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 5 =>
            _field.`type` match {
              case TType.STRING =>
                h5OpendId = readH5OpendIdValue(_iprot)
                _got_h5OpendId = true
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'h5OpendId' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 6 =>
            _field.`type` match {
              case TType.STRING =>
                unionId = readUnionIdValue(_iprot)
                _got_unionId = true
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'unionId' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 7 =>
            _field.`type` match {
              case TType.I64 =>
                createdAt = readCreatedAtValue(_iprot)
                _got_createdAt = true
              case _actualType =>
                val _expectedType = TType.I64
                throw new TProtocolException(
                  "Received wrong type for field 'createdAt' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 8 =>
            _field.`type` match {
              case TType.I64 =>
                updatedAt = readUpdatedAtValue(_iprot)
                _got_updatedAt = true
              case _actualType =>
                val _expectedType = TType.I64
                throw new TProtocolException(
                  "Received wrong type for field 'updatedAt' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 9 =>
            _field.`type` match {
              case TType.I32 | TType.ENUM =>
                status = readStatusValue(_iprot)
                _got_status = true
              case _actualType =>
                val _expectedType = TType.ENUM
                throw new TProtocolException(
                  "Received wrong type for field 'status' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 10 =>
            _field.`type` match {
              case TType.STRING =>
                nickName = readNickNameValue(_iprot)
                _got_nickName = true
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'nickName' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 11 =>
            _field.`type` match {
              case TType.I32 | TType.ENUM =>
                gender = readGenderValue(_iprot)
                _got_gender = true
              case _actualType =>
                val _expectedType = TType.ENUM
                throw new TProtocolException(
                  "Received wrong type for field 'gender' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 12 =>
            _field.`type` match {
              case TType.STRING =>
                city = readCityValue(_iprot)
                _got_city = true
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'city' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 13 =>
            _field.`type` match {
              case TType.STRING =>
                province = readProvinceValue(_iprot)
                _got_province = true
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'province' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 14 =>
            _field.`type` match {
              case TType.STRING =>
                country = readCountryValue(_iprot)
                _got_country = true
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'country' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 15 =>
            _field.`type` match {
              case TType.STRING =>
                avatarUrl = readAvatarUrlValue(_iprot)
                _got_avatarUrl = true
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'avatarUrl' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 16 =>
            _field.`type` match {
              case TType.STRING =>
                phoneNumber = readPhoneNumberValue(_iprot)
                _got_phoneNumber = true
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'phoneNumber' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 17 =>
            _field.`type` match {
              case TType.LIST =>
                friendIds = readFriendIdsValue(_iprot)
                _got_friendIds = true
              case _actualType =>
                val _expectedType = TType.LIST
                throw new TProtocolException(
                  "Received wrong type for field 'friendIds' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 18 =>
            _field.`type` match {
              case TType.I32 | TType.ENUM =>
                source = readSourceValue(_iprot)
                _got_source = true
              case _actualType =>
                val _expectedType = TType.ENUM
                throw new TProtocolException(
                  "Received wrong type for field 'source' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 19 =>
            _field.`type` match {
              case TType.I32 | TType.ENUM =>
                fromType = readFromTypeValue(_iprot)
                _got_fromType = true
              case _actualType =>
                val _expectedType = TType.ENUM
                throw new TProtocolException(
                  "Received wrong type for field 'fromType' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 20 =>
            _field.`type` match {
              case TType.STRING =>
                code = readCodeValue(_iprot)
                _got_code = true
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'code' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 21 =>
            _field.`type` match {
              case TType.I32 =>
                rtype = readRtypeValue(_iprot)
                _got_rtype = true
              case _actualType =>
                val _expectedType = TType.I32
                throw new TProtocolException(
                  "Received wrong type for field 'rtype' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case _ =>
            if (_passthroughFields == null)
              _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
            _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
        }
        _iprot.readFieldEnd()
      }
    }
    _iprot.readStructEnd()

    if (!_got_id) throw new TProtocolException("Required field 'id' was not found in serialized data for struct User")
    if (!_got_uuid) throw new TProtocolException("Required field 'uuid' was not found in serialized data for struct User")
    if (!_got_openId) throw new TProtocolException("Required field 'openId' was not found in serialized data for struct User")
    if (!_got_appOpendId) throw new TProtocolException("Required field 'appOpendId' was not found in serialized data for struct User")
    if (!_got_h5OpendId) throw new TProtocolException("Required field 'h5OpendId' was not found in serialized data for struct User")
    if (!_got_unionId) throw new TProtocolException("Required field 'unionId' was not found in serialized data for struct User")
    if (!_got_createdAt) throw new TProtocolException("Required field 'createdAt' was not found in serialized data for struct User")
    if (!_got_updatedAt) throw new TProtocolException("Required field 'updatedAt' was not found in serialized data for struct User")
    if (!_got_status) throw new TProtocolException("Required field 'status' was not found in serialized data for struct User")
    if (!_got_nickName) throw new TProtocolException("Required field 'nickName' was not found in serialized data for struct User")
    if (!_got_gender) throw new TProtocolException("Required field 'gender' was not found in serialized data for struct User")
    if (!_got_city) throw new TProtocolException("Required field 'city' was not found in serialized data for struct User")
    if (!_got_province) throw new TProtocolException("Required field 'province' was not found in serialized data for struct User")
    if (!_got_country) throw new TProtocolException("Required field 'country' was not found in serialized data for struct User")
    if (!_got_avatarUrl) throw new TProtocolException("Required field 'avatarUrl' was not found in serialized data for struct User")
    if (!_got_phoneNumber) throw new TProtocolException("Required field 'phoneNumber' was not found in serialized data for struct User")
    if (!_got_friendIds) throw new TProtocolException("Required field 'friendIds' was not found in serialized data for struct User")
    if (!_got_source) throw new TProtocolException("Required field 'source' was not found in serialized data for struct User")
    if (!_got_fromType) throw new TProtocolException("Required field 'fromType' was not found in serialized data for struct User")
    if (!_got_code) throw new TProtocolException("Required field 'code' was not found in serialized data for struct User")
    if (!_got_rtype) throw new TProtocolException("Required field 'rtype' was not found in serialized data for struct User")
    new Immutable(
      id,
      uuid,
      openId,
      appOpendId,
      h5OpendId,
      unionId,
      createdAt,
      updatedAt,
      status,
      nickName,
      gender,
      city,
      province,
      country,
      avatarUrl,
      phoneNumber,
      friendIds,
      source,
      fromType,
      code,
      rtype,
      if (_passthroughFields == null)
        NoPassthroughFields
      else
        _passthroughFields.result()
    )
  }

  def apply(
             id: Long,
             uuid: String,
             openId: String,
             appOpendId: String,
             h5OpendId: String,
             unionId: String,
             createdAt: Long,
             updatedAt: Long,
             status: com.ag.game.quiz.idl.thriftscala.UserStatus,
             nickName: String,
             gender: com.ag.game.quiz.idl.thriftscala.Gender,
             city: String,
             province: String,
             country: String,
             avatarUrl: String,
             phoneNumber: String,
             friendIds: Seq[Long] = Seq[Long](),
             source: com.ag.game.quiz.idl.thriftscala.UserSource,
             fromType: com.ag.game.quiz.idl.thriftscala.UserFromType,
             code: String,
             rtype: Int
           ): User =
    new Immutable(
      id,
      uuid,
      openId,
      appOpendId,
      h5OpendId,
      unionId,
      createdAt,
      updatedAt,
      status,
      nickName,
      gender,
      city,
      province,
      country,
      avatarUrl,
      phoneNumber,
      friendIds,
      source,
      fromType,
      code,
      rtype
    )

  def unapply(_item: User): _root_.scala.Option[_root_.scala.Tuple21[Long, String, String, String, String, String, Long, Long, com.ag.game.quiz.idl.thriftscala.UserStatus, String, com.ag.game.quiz.idl.thriftscala.Gender, String, String, String, String, String, Seq[Long], com.ag.game.quiz.idl.thriftscala.UserSource, com.ag.game.quiz.idl.thriftscala.UserFromType, String, Int]] = _root_.scala.Some(_item.toTuple)


  @inline private[thriftscala] def readIdValue(_iprot: TProtocol): Long = {
    _iprot.readI64()
  }

  @inline private def writeIdField(id_item: Long, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(IdField)
    writeIdValue(id_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeIdValue(id_item: Long, _oprot: TProtocol): Unit = {
    _oprot.writeI64(id_item)
  }

  @inline private[thriftscala] def readUuidValue(_iprot: TProtocol): String = {
    _iprot.readString()
  }

  @inline private def writeUuidField(uuid_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(UuidField)
    writeUuidValue(uuid_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeUuidValue(uuid_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeString(uuid_item)
  }

  @inline private[thriftscala] def readOpenIdValue(_iprot: TProtocol): String = {
    _iprot.readString()
  }

  @inline private def writeOpenIdField(openId_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(OpenIdField)
    writeOpenIdValue(openId_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeOpenIdValue(openId_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeString(openId_item)
  }

  @inline private[thriftscala] def readAppOpendIdValue(_iprot: TProtocol): String = {
    _iprot.readString()
  }

  @inline private def writeAppOpendIdField(appOpendId_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(AppOpendIdField)
    writeAppOpendIdValue(appOpendId_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeAppOpendIdValue(appOpendId_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeString(appOpendId_item)
  }

  @inline private[thriftscala] def readH5OpendIdValue(_iprot: TProtocol): String = {
    _iprot.readString()
  }

  @inline private def writeH5OpendIdField(h5OpendId_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(H5OpendIdField)
    writeH5OpendIdValue(h5OpendId_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeH5OpendIdValue(h5OpendId_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeString(h5OpendId_item)
  }

  @inline private[thriftscala] def readUnionIdValue(_iprot: TProtocol): String = {
    _iprot.readString()
  }

  @inline private def writeUnionIdField(unionId_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(UnionIdField)
    writeUnionIdValue(unionId_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeUnionIdValue(unionId_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeString(unionId_item)
  }

  @inline private[thriftscala] def readCreatedAtValue(_iprot: TProtocol): Long = {
    _iprot.readI64()
  }

  @inline private def writeCreatedAtField(createdAt_item: Long, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(CreatedAtField)
    writeCreatedAtValue(createdAt_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeCreatedAtValue(createdAt_item: Long, _oprot: TProtocol): Unit = {
    _oprot.writeI64(createdAt_item)
  }

  @inline private[thriftscala] def readUpdatedAtValue(_iprot: TProtocol): Long = {
    _iprot.readI64()
  }

  @inline private def writeUpdatedAtField(updatedAt_item: Long, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(UpdatedAtField)
    writeUpdatedAtValue(updatedAt_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeUpdatedAtValue(updatedAt_item: Long, _oprot: TProtocol): Unit = {
    _oprot.writeI64(updatedAt_item)
  }

  @inline private[thriftscala] def readStatusValue(_iprot: TProtocol): com.ag.game.quiz.idl.thriftscala.UserStatus = {
    com.ag.game.quiz.idl.thriftscala.UserStatus.getOrUnknown(_iprot.readI32())
  }

  @inline private def writeStatusField(status_item: com.ag.game.quiz.idl.thriftscala.UserStatus, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(StatusFieldI32)
    writeStatusValue(status_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeStatusValue(status_item: com.ag.game.quiz.idl.thriftscala.UserStatus, _oprot: TProtocol): Unit = {
    _oprot.writeI32(status_item.value)
  }

  @inline private[thriftscala] def readNickNameValue(_iprot: TProtocol): String = {
    _iprot.readString()
  }

  @inline private def writeNickNameField(nickName_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(NickNameField)
    writeNickNameValue(nickName_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeNickNameValue(nickName_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeString(nickName_item)
  }

  @inline private[thriftscala] def readGenderValue(_iprot: TProtocol): com.ag.game.quiz.idl.thriftscala.Gender = {
    com.ag.game.quiz.idl.thriftscala.Gender.getOrUnknown(_iprot.readI32())
  }

  @inline private def writeGenderField(gender_item: com.ag.game.quiz.idl.thriftscala.Gender, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(GenderFieldI32)
    writeGenderValue(gender_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeGenderValue(gender_item: com.ag.game.quiz.idl.thriftscala.Gender, _oprot: TProtocol): Unit = {
    _oprot.writeI32(gender_item.value)
  }

  @inline private[thriftscala] def readCityValue(_iprot: TProtocol): String = {
    _iprot.readString()
  }

  @inline private def writeCityField(city_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(CityField)
    writeCityValue(city_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeCityValue(city_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeString(city_item)
  }

  @inline private[thriftscala] def readProvinceValue(_iprot: TProtocol): String = {
    _iprot.readString()
  }

  @inline private def writeProvinceField(province_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(ProvinceField)
    writeProvinceValue(province_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeProvinceValue(province_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeString(province_item)
  }

  @inline private[thriftscala] def readCountryValue(_iprot: TProtocol): String = {
    _iprot.readString()
  }

  @inline private def writeCountryField(country_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(CountryField)
    writeCountryValue(country_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeCountryValue(country_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeString(country_item)
  }

  @inline private[thriftscala] def readAvatarUrlValue(_iprot: TProtocol): String = {
    _iprot.readString()
  }

  @inline private def writeAvatarUrlField(avatarUrl_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(AvatarUrlField)
    writeAvatarUrlValue(avatarUrl_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeAvatarUrlValue(avatarUrl_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeString(avatarUrl_item)
  }

  @inline private[thriftscala] def readPhoneNumberValue(_iprot: TProtocol): String = {
    _iprot.readString()
  }

  @inline private def writePhoneNumberField(phoneNumber_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(PhoneNumberField)
    writePhoneNumberValue(phoneNumber_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writePhoneNumberValue(phoneNumber_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeString(phoneNumber_item)
  }

  @inline private[thriftscala] def readFriendIdsValue(_iprot: TProtocol): Seq[Long] = {
    val _list = _iprot.readListBegin()
    if (_list.size == 0) {
      _iprot.readListEnd()
      Nil
    } else {
      val _rv = new mutable$ArrayBuffer[Long](_list.size)
      var _i = 0
      while (_i < _list.size) {
        _rv += {
          _iprot.readI64()
        }
        _i += 1
      }
      _iprot.readListEnd()
      _rv
    }
  }

  @inline private def writeFriendIdsField(friendIds_item: Seq[Long], _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(FriendIdsField)
    writeFriendIdsValue(friendIds_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeFriendIdsValue(friendIds_item: Seq[Long], _oprot: TProtocol): Unit = {
    _oprot.writeListBegin(new TList(TType.I64, friendIds_item.size))
    friendIds_item match {
      case _: IndexedSeq[_] =>
        var _i = 0
        val _size = friendIds_item.size
        while (_i < _size) {
          val friendIds_item_element = friendIds_item(_i)
          _oprot.writeI64(friendIds_item_element)
          _i += 1
        }
      case _ =>
        friendIds_item.foreach { friendIds_item_element =>
          _oprot.writeI64(friendIds_item_element)
        }
    }
    _oprot.writeListEnd()
  }

  @inline private[thriftscala] def readSourceValue(_iprot: TProtocol): com.ag.game.quiz.idl.thriftscala.UserSource = {
    com.ag.game.quiz.idl.thriftscala.UserSource.getOrUnknown(_iprot.readI32())
  }

  @inline private def writeSourceField(source_item: com.ag.game.quiz.idl.thriftscala.UserSource, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(SourceFieldI32)
    writeSourceValue(source_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeSourceValue(source_item: com.ag.game.quiz.idl.thriftscala.UserSource, _oprot: TProtocol): Unit = {
    _oprot.writeI32(source_item.value)
  }

  @inline private[thriftscala] def readFromTypeValue(_iprot: TProtocol): com.ag.game.quiz.idl.thriftscala.UserFromType = {
    com.ag.game.quiz.idl.thriftscala.UserFromType.getOrUnknown(_iprot.readI32())
  }

  @inline private def writeFromTypeField(fromType_item: com.ag.game.quiz.idl.thriftscala.UserFromType, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(FromTypeFieldI32)
    writeFromTypeValue(fromType_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeFromTypeValue(fromType_item: com.ag.game.quiz.idl.thriftscala.UserFromType, _oprot: TProtocol): Unit = {
    _oprot.writeI32(fromType_item.value)
  }

  @inline private[thriftscala] def readCodeValue(_iprot: TProtocol): String = {
    _iprot.readString()
  }

  @inline private def writeCodeField(code_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(CodeField)
    writeCodeValue(code_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeCodeValue(code_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeString(code_item)
  }

  @inline private[thriftscala] def readRtypeValue(_iprot: TProtocol): Int = {
    _iprot.readI32()
  }

  @inline private def writeRtypeField(rtype_item: Int, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(RtypeField)
    writeRtypeValue(rtype_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeRtypeValue(rtype_item: Int, _oprot: TProtocol): Unit = {
    _oprot.writeI32(rtype_item)
  }


  object Immutable extends ThriftStructCodec3[User] {
    override def encode(_item: User, _oproto: TProtocol): Unit = { _item.write(_oproto) }
    override def decode(_iprot: TProtocol): User = User.decode(_iprot)
    override lazy val metaData: ThriftStructMetaData[User] = User.metaData
  }

  /**
    * The default read-only implementation of User.  You typically should not need to
    * directly reference this class; instead, use the User.apply method to construct
    * new instances.
    */
  class Immutable(
                   val id: Long,
                   val uuid: String,
                   val openId: String,
                   val appOpendId: String,
                   val h5OpendId: String,
                   val unionId: String,
                   val createdAt: Long,
                   val updatedAt: Long,
                   val status: com.ag.game.quiz.idl.thriftscala.UserStatus,
                   val nickName: String,
                   val gender: com.ag.game.quiz.idl.thriftscala.Gender,
                   val city: String,
                   val province: String,
                   val country: String,
                   val avatarUrl: String,
                   val phoneNumber: String,
                   val friendIds: Seq[Long],
                   val source: com.ag.game.quiz.idl.thriftscala.UserSource,
                   val fromType: com.ag.game.quiz.idl.thriftscala.UserFromType,
                   val code: String,
                   val rtype: Int,
                   override val _passthroughFields: immutable$Map[Short, TFieldBlob])
    extends User {
    def this(
              id: Long,
              uuid: String,
              openId: String,
              appOpendId: String,
              h5OpendId: String,
              unionId: String,
              createdAt: Long,
              updatedAt: Long,
              status: com.ag.game.quiz.idl.thriftscala.UserStatus,
              nickName: String,
              gender: com.ag.game.quiz.idl.thriftscala.Gender,
              city: String,
              province: String,
              country: String,
              avatarUrl: String,
              phoneNumber: String,
              friendIds: Seq[Long] = Seq[Long](),
              source: com.ag.game.quiz.idl.thriftscala.UserSource,
              fromType: com.ag.game.quiz.idl.thriftscala.UserFromType,
              code: String,
              rtype: Int
            ) = this(
      id,
      uuid,
      openId,
      appOpendId,
      h5OpendId,
      unionId,
      createdAt,
      updatedAt,
      status,
      nickName,
      gender,
      city,
      province,
      country,
      avatarUrl,
      phoneNumber,
      friendIds,
      source,
      fromType,
      code,
      rtype,
      Map.empty
    )
  }

  /**
    * This is another Immutable, this however keeps strings as lazy values that are lazily decoded from the backing
    * array byte on read.
    */
  private[this] class LazyImmutable(
                                     _proto: LazyTProtocol,
                                     _buf: Array[Byte],
                                     _start_offset: Int,
                                     _end_offset: Int,
                                     val id: Long,
                                     uuidOffset: Int,
                                     openIdOffset: Int,
                                     appOpendIdOffset: Int,
                                     h5OpendIdOffset: Int,
                                     unionIdOffset: Int,
                                     val createdAt: Long,
                                     val updatedAt: Long,
                                     val status: com.ag.game.quiz.idl.thriftscala.UserStatus,
                                     nickNameOffset: Int,
                                     val gender: com.ag.game.quiz.idl.thriftscala.Gender,
                                     cityOffset: Int,
                                     provinceOffset: Int,
                                     countryOffset: Int,
                                     avatarUrlOffset: Int,
                                     phoneNumberOffset: Int,
                                     val friendIds: Seq[Long],
                                     val source: com.ag.game.quiz.idl.thriftscala.UserSource,
                                     val fromType: com.ag.game.quiz.idl.thriftscala.UserFromType,
                                     codeOffset: Int,
                                     val rtype: Int,
                                     override val _passthroughFields: immutable$Map[Short, TFieldBlob])
    extends User {

    override def write(_oprot: TProtocol): Unit = {
      _oprot match {
        case i: LazyTProtocol => i.writeRaw(_buf, _start_offset, _end_offset - _start_offset)
        case _ => super.write(_oprot)
      }
    }

    lazy val uuid: String =
      if (uuidOffset == -1)
        null
      else {
        _proto.decodeString(_buf, uuidOffset)
      }
    lazy val openId: String =
      if (openIdOffset == -1)
        null
      else {
        _proto.decodeString(_buf, openIdOffset)
      }
    lazy val appOpendId: String =
      if (appOpendIdOffset == -1)
        null
      else {
        _proto.decodeString(_buf, appOpendIdOffset)
      }
    lazy val h5OpendId: String =
      if (h5OpendIdOffset == -1)
        null
      else {
        _proto.decodeString(_buf, h5OpendIdOffset)
      }
    lazy val unionId: String =
      if (unionIdOffset == -1)
        null
      else {
        _proto.decodeString(_buf, unionIdOffset)
      }
    lazy val nickName: String =
      if (nickNameOffset == -1)
        null
      else {
        _proto.decodeString(_buf, nickNameOffset)
      }
    lazy val city: String =
      if (cityOffset == -1)
        null
      else {
        _proto.decodeString(_buf, cityOffset)
      }
    lazy val province: String =
      if (provinceOffset == -1)
        null
      else {
        _proto.decodeString(_buf, provinceOffset)
      }
    lazy val country: String =
      if (countryOffset == -1)
        null
      else {
        _proto.decodeString(_buf, countryOffset)
      }
    lazy val avatarUrl: String =
      if (avatarUrlOffset == -1)
        null
      else {
        _proto.decodeString(_buf, avatarUrlOffset)
      }
    lazy val phoneNumber: String =
      if (phoneNumberOffset == -1)
        null
      else {
        _proto.decodeString(_buf, phoneNumberOffset)
      }
    lazy val code: String =
      if (codeOffset == -1)
        null
      else {
        _proto.decodeString(_buf, codeOffset)
      }

    /**
      * Override the super hash code to make it a lazy val rather than def.
      *
      * Calculating the hash code can be expensive, caching it where possible
      * can provide significant performance wins. (Key in a hash map for instance)
      * Usually not safe since the normal constructor will accept a mutable map or
      * set as an arg
      * Here however we control how the class is generated from serialized data.
      * With the class private and the contract that we throw away our mutable references
      * having the hash code lazy here is safe.
      */
    override lazy val hashCode = super.hashCode
  }

  /**
    * This Proxy trait allows you to extend the User trait with additional state or
    * behavior and implement the read-only methods from User using an underlying
    * instance.
    */
  trait Proxy extends User {
    protected def _underlying_User: User
    override def id: Long = _underlying_User.id
    override def uuid: String = _underlying_User.uuid
    override def openId: String = _underlying_User.openId
    override def appOpendId: String = _underlying_User.appOpendId
    override def h5OpendId: String = _underlying_User.h5OpendId
    override def unionId: String = _underlying_User.unionId
    override def createdAt: Long = _underlying_User.createdAt
    override def updatedAt: Long = _underlying_User.updatedAt
    override def status: com.ag.game.quiz.idl.thriftscala.UserStatus = _underlying_User.status
    override def nickName: String = _underlying_User.nickName
    override def gender: com.ag.game.quiz.idl.thriftscala.Gender = _underlying_User.gender
    override def city: String = _underlying_User.city
    override def province: String = _underlying_User.province
    override def country: String = _underlying_User.country
    override def avatarUrl: String = _underlying_User.avatarUrl
    override def phoneNumber: String = _underlying_User.phoneNumber
    override def friendIds: Seq[Long] = _underlying_User.friendIds
    override def source: com.ag.game.quiz.idl.thriftscala.UserSource = _underlying_User.source
    override def fromType: com.ag.game.quiz.idl.thriftscala.UserFromType = _underlying_User.fromType
    override def code: String = _underlying_User.code
    override def rtype: Int = _underlying_User.rtype
    override def _passthroughFields = _underlying_User._passthroughFields
  }
}

/**
  * Prefer the companion object's [[com.ag.game.quiz.thriftscala.User.apply]]
  * for construction if you don't need to specify passthrough fields.
  */
trait User
  extends ThriftStruct
    with _root_.scala.Product21[Long, String, String, String, String, String, Long, Long, com.ag.game.quiz.idl.thriftscala.UserStatus, String, com.ag.game.quiz.idl.thriftscala.Gender, String, String, String, String, String, Seq[Long], com.ag.game.quiz.idl.thriftscala.UserSource, com.ag.game.quiz.idl.thriftscala.UserFromType, String, Int]
    with HasThriftStructCodec3[User]
    with java.io.Serializable
{
  import User._

  def id: Long
  def uuid: String
  def openId: String
  def appOpendId: String
  def h5OpendId: String
  def unionId: String
  def createdAt: Long
  def updatedAt: Long
  def status: com.ag.game.quiz.idl.thriftscala.UserStatus
  def nickName: String
  def gender: com.ag.game.quiz.idl.thriftscala.Gender
  def city: String
  def province: String
  def country: String
  def avatarUrl: String
  def phoneNumber: String
  def friendIds: Seq[Long]
  def source: com.ag.game.quiz.idl.thriftscala.UserSource
  def fromType: com.ag.game.quiz.idl.thriftscala.UserFromType
  def code: String
  def rtype: Int

  def _passthroughFields: immutable$Map[Short, TFieldBlob] = immutable$Map.empty

  def _1 = id
  def _2 = uuid
  def _3 = openId
  def _4 = appOpendId
  def _5 = h5OpendId
  def _6 = unionId
  def _7 = createdAt
  def _8 = updatedAt
  def _9 = status
  def _10 = nickName
  def _11 = gender
  def _12 = city
  def _13 = province
  def _14 = country
  def _15 = avatarUrl
  def _16 = phoneNumber
  def _17 = friendIds
  def _18 = source
  def _19 = fromType
  def _20 = code
  def _21 = rtype

  def toTuple: _root_.scala.Tuple21[Long, String, String, String, String, String, Long, Long, com.ag.game.quiz.idl.thriftscala.UserStatus, String, com.ag.game.quiz.idl.thriftscala.Gender, String, String, String, String, String, Seq[Long], com.ag.game.quiz.idl.thriftscala.UserSource, com.ag.game.quiz.idl.thriftscala.UserFromType, String, Int] = {
    (
      id,
      uuid,
      openId,
      appOpendId,
      h5OpendId,
      unionId,
      createdAt,
      updatedAt,
      status,
      nickName,
      gender,
      city,
      province,
      country,
      avatarUrl,
      phoneNumber,
      friendIds,
      source,
      fromType,
      code,
      rtype
    )
  }


  /**
    * Gets a field value encoded as a binary blob using TCompactProtocol.  If the specified field
    * is present in the passthrough map, that value is returned.  Otherwise, if the specified field
    * is known and not optional and set to None, then the field is serialized and returned.
    */
  def getFieldBlob(_fieldId: Short): _root_.scala.Option[TFieldBlob] = {
    lazy val _buff = new TMemoryBuffer(32)
    lazy val _oprot = new TCompactProtocol(_buff)
    _passthroughFields.get(_fieldId) match {
      case blob: _root_.scala.Some[TFieldBlob] => blob
      case _root_.scala.None => {
        val _fieldOpt: _root_.scala.Option[TField] =
          _fieldId match {
            case 1 =>
              if (true) {
                writeIdValue(id, _oprot)
                _root_.scala.Some(User.IdField)
              } else {
                _root_.scala.None
              }
            case 2 =>
              if (uuid ne null) {
                writeUuidValue(uuid, _oprot)
                _root_.scala.Some(User.UuidField)
              } else {
                _root_.scala.None
              }
            case 3 =>
              if (openId ne null) {
                writeOpenIdValue(openId, _oprot)
                _root_.scala.Some(User.OpenIdField)
              } else {
                _root_.scala.None
              }
            case 4 =>
              if (appOpendId ne null) {
                writeAppOpendIdValue(appOpendId, _oprot)
                _root_.scala.Some(User.AppOpendIdField)
              } else {
                _root_.scala.None
              }
            case 5 =>
              if (h5OpendId ne null) {
                writeH5OpendIdValue(h5OpendId, _oprot)
                _root_.scala.Some(User.H5OpendIdField)
              } else {
                _root_.scala.None
              }
            case 6 =>
              if (unionId ne null) {
                writeUnionIdValue(unionId, _oprot)
                _root_.scala.Some(User.UnionIdField)
              } else {
                _root_.scala.None
              }
            case 7 =>
              if (true) {
                writeCreatedAtValue(createdAt, _oprot)
                _root_.scala.Some(User.CreatedAtField)
              } else {
                _root_.scala.None
              }
            case 8 =>
              if (true) {
                writeUpdatedAtValue(updatedAt, _oprot)
                _root_.scala.Some(User.UpdatedAtField)
              } else {
                _root_.scala.None
              }
            case 9 =>
              if (status ne null) {
                writeStatusValue(status, _oprot)
                _root_.scala.Some(User.StatusField)
              } else {
                _root_.scala.None
              }
            case 10 =>
              if (nickName ne null) {
                writeNickNameValue(nickName, _oprot)
                _root_.scala.Some(User.NickNameField)
              } else {
                _root_.scala.None
              }
            case 11 =>
              if (gender ne null) {
                writeGenderValue(gender, _oprot)
                _root_.scala.Some(User.GenderField)
              } else {
                _root_.scala.None
              }
            case 12 =>
              if (city ne null) {
                writeCityValue(city, _oprot)
                _root_.scala.Some(User.CityField)
              } else {
                _root_.scala.None
              }
            case 13 =>
              if (province ne null) {
                writeProvinceValue(province, _oprot)
                _root_.scala.Some(User.ProvinceField)
              } else {
                _root_.scala.None
              }
            case 14 =>
              if (country ne null) {
                writeCountryValue(country, _oprot)
                _root_.scala.Some(User.CountryField)
              } else {
                _root_.scala.None
              }
            case 15 =>
              if (avatarUrl ne null) {
                writeAvatarUrlValue(avatarUrl, _oprot)
                _root_.scala.Some(User.AvatarUrlField)
              } else {
                _root_.scala.None
              }
            case 16 =>
              if (phoneNumber ne null) {
                writePhoneNumberValue(phoneNumber, _oprot)
                _root_.scala.Some(User.PhoneNumberField)
              } else {
                _root_.scala.None
              }
            case 17 =>
              if (friendIds ne null) {
                writeFriendIdsValue(friendIds, _oprot)
                _root_.scala.Some(User.FriendIdsField)
              } else {
                _root_.scala.None
              }
            case 18 =>
              if (source ne null) {
                writeSourceValue(source, _oprot)
                _root_.scala.Some(User.SourceField)
              } else {
                _root_.scala.None
              }
            case 19 =>
              if (fromType ne null) {
                writeFromTypeValue(fromType, _oprot)
                _root_.scala.Some(User.FromTypeField)
              } else {
                _root_.scala.None
              }
            case 20 =>
              if (code ne null) {
                writeCodeValue(code, _oprot)
                _root_.scala.Some(User.CodeField)
              } else {
                _root_.scala.None
              }
            case 21 =>
              if (true) {
                writeRtypeValue(rtype, _oprot)
                _root_.scala.Some(User.RtypeField)
              } else {
                _root_.scala.None
              }
            case _ => _root_.scala.None
          }
        _fieldOpt match {
          case _root_.scala.Some(_field) =>
            _root_.scala.Some(TFieldBlob(_field, Buf.ByteArray.Owned(_buff.getArray())))
          case _root_.scala.None =>
            _root_.scala.None
        }
      }
    }
  }

  /**
    * Collects TCompactProtocol-encoded field values according to `getFieldBlob` into a map.
    */
  def getFieldBlobs(ids: TraversableOnce[Short]): immutable$Map[Short, TFieldBlob] =
    (ids flatMap { id => getFieldBlob(id) map { id -> _ } }).toMap

  /**
    * Sets a field using a TCompactProtocol-encoded binary blob.  If the field is a known
    * field, the blob is decoded and the field is set to the decoded value.  If the field
    * is unknown and passthrough fields are enabled, then the blob will be stored in
    * _passthroughFields.
    */
  def setField(_blob: TFieldBlob): User = {
    var id: Long = this.id
    var uuid: String = this.uuid
    var openId: String = this.openId
    var appOpendId: String = this.appOpendId
    var h5OpendId: String = this.h5OpendId
    var unionId: String = this.unionId
    var createdAt: Long = this.createdAt
    var updatedAt: Long = this.updatedAt
    var status: com.ag.game.quiz.idl.thriftscala.UserStatus = this.status
    var nickName: String = this.nickName
    var gender: com.ag.game.quiz.idl.thriftscala.Gender = this.gender
    var city: String = this.city
    var province: String = this.province
    var country: String = this.country
    var avatarUrl: String = this.avatarUrl
    var phoneNumber: String = this.phoneNumber
    var friendIds: Seq[Long] = this.friendIds
    var source: com.ag.game.quiz.idl.thriftscala.UserSource = this.source
    var fromType: com.ag.game.quiz.idl.thriftscala.UserFromType = this.fromType
    var code: String = this.code
    var rtype: Int = this.rtype
    var _passthroughFields = this._passthroughFields
    _blob.id match {
      case 1 =>
        id = readIdValue(_blob.read)
      case 2 =>
        uuid = readUuidValue(_blob.read)
      case 3 =>
        openId = readOpenIdValue(_blob.read)
      case 4 =>
        appOpendId = readAppOpendIdValue(_blob.read)
      case 5 =>
        h5OpendId = readH5OpendIdValue(_blob.read)
      case 6 =>
        unionId = readUnionIdValue(_blob.read)
      case 7 =>
        createdAt = readCreatedAtValue(_blob.read)
      case 8 =>
        updatedAt = readUpdatedAtValue(_blob.read)
      case 9 =>
        status = readStatusValue(_blob.read)
      case 10 =>
        nickName = readNickNameValue(_blob.read)
      case 11 =>
        gender = readGenderValue(_blob.read)
      case 12 =>
        city = readCityValue(_blob.read)
      case 13 =>
        province = readProvinceValue(_blob.read)
      case 14 =>
        country = readCountryValue(_blob.read)
      case 15 =>
        avatarUrl = readAvatarUrlValue(_blob.read)
      case 16 =>
        phoneNumber = readPhoneNumberValue(_blob.read)
      case 17 =>
        friendIds = readFriendIdsValue(_blob.read)
      case 18 =>
        source = readSourceValue(_blob.read)
      case 19 =>
        fromType = readFromTypeValue(_blob.read)
      case 20 =>
        code = readCodeValue(_blob.read)
      case 21 =>
        rtype = readRtypeValue(_blob.read)
      case _ => _passthroughFields += (_blob.id -> _blob)
    }
    new Immutable(
      id,
      uuid,
      openId,
      appOpendId,
      h5OpendId,
      unionId,
      createdAt,
      updatedAt,
      status,
      nickName,
      gender,
      city,
      province,
      country,
      avatarUrl,
      phoneNumber,
      friendIds,
      source,
      fromType,
      code,
      rtype,
      _passthroughFields
    )
  }

  /**
    * If the specified field is optional, it is set to None.  Otherwise, if the field is
    * known, it is reverted to its default value; if the field is unknown, it is removed
    * from the passthroughFields map, if present.
    */
  def unsetField(_fieldId: Short): User = {
    var id: Long = this.id
    var uuid: String = this.uuid
    var openId: String = this.openId
    var appOpendId: String = this.appOpendId
    var h5OpendId: String = this.h5OpendId
    var unionId: String = this.unionId
    var createdAt: Long = this.createdAt
    var updatedAt: Long = this.updatedAt
    var status: com.ag.game.quiz.idl.thriftscala.UserStatus = this.status
    var nickName: String = this.nickName
    var gender: com.ag.game.quiz.idl.thriftscala.Gender = this.gender
    var city: String = this.city
    var province: String = this.province
    var country: String = this.country
    var avatarUrl: String = this.avatarUrl
    var phoneNumber: String = this.phoneNumber
    var friendIds: Seq[Long] = this.friendIds
    var source: com.ag.game.quiz.idl.thriftscala.UserSource = this.source
    var fromType: com.ag.game.quiz.idl.thriftscala.UserFromType = this.fromType
    var code: String = this.code
    var rtype: Int = this.rtype

    _fieldId match {
      case 1 =>
        id = 0L
      case 2 =>
        uuid = null
      case 3 =>
        openId = null
      case 4 =>
        appOpendId = null
      case 5 =>
        h5OpendId = null
      case 6 =>
        unionId = null
      case 7 =>
        createdAt = 0L
      case 8 =>
        updatedAt = 0L
      case 9 =>
        status = null
      case 10 =>
        nickName = null
      case 11 =>
        gender = null
      case 12 =>
        city = null
      case 13 =>
        province = null
      case 14 =>
        country = null
      case 15 =>
        avatarUrl = null
      case 16 =>
        phoneNumber = null
      case 17 =>
        friendIds = Seq[Long]()
      case 18 =>
        source = null
      case 19 =>
        fromType = null
      case 20 =>
        code = null
      case 21 =>
        rtype = 0
      case _ =>
    }
    new Immutable(
      id,
      uuid,
      openId,
      appOpendId,
      h5OpendId,
      unionId,
      createdAt,
      updatedAt,
      status,
      nickName,
      gender,
      city,
      province,
      country,
      avatarUrl,
      phoneNumber,
      friendIds,
      source,
      fromType,
      code,
      rtype,
      _passthroughFields - _fieldId
    )
  }

  /**
    * If the specified field is optional, it is set to None.  Otherwise, if the field is
    * known, it is reverted to its default value; if the field is unknown, it is removed
    * from the passthroughFields map, if present.
    */
  def unsetId: User = unsetField(1)

  def unsetUuid: User = unsetField(2)

  def unsetOpenId: User = unsetField(3)

  def unsetAppOpendId: User = unsetField(4)

  def unsetH5OpendId: User = unsetField(5)

  def unsetUnionId: User = unsetField(6)

  def unsetCreatedAt: User = unsetField(7)

  def unsetUpdatedAt: User = unsetField(8)

  def unsetStatus: User = unsetField(9)

  def unsetNickName: User = unsetField(10)

  def unsetGender: User = unsetField(11)

  def unsetCity: User = unsetField(12)

  def unsetProvince: User = unsetField(13)

  def unsetCountry: User = unsetField(14)

  def unsetAvatarUrl: User = unsetField(15)

  def unsetPhoneNumber: User = unsetField(16)

  def unsetFriendIds: User = unsetField(17)

  def unsetSource: User = unsetField(18)

  def unsetFromType: User = unsetField(19)

  def unsetCode: User = unsetField(20)

  def unsetRtype: User = unsetField(21)


  override def write(_oprot: TProtocol): Unit = {
    User.validate(this)
    _oprot.writeStructBegin(Struct)
    writeIdField(id, _oprot)
    if (uuid ne null) writeUuidField(uuid, _oprot)
    if (openId ne null) writeOpenIdField(openId, _oprot)
    if (appOpendId ne null) writeAppOpendIdField(appOpendId, _oprot)
    if (h5OpendId ne null) writeH5OpendIdField(h5OpendId, _oprot)
    if (unionId ne null) writeUnionIdField(unionId, _oprot)
    writeCreatedAtField(createdAt, _oprot)
    writeUpdatedAtField(updatedAt, _oprot)
    if (status ne null) writeStatusField(status, _oprot)
    if (nickName ne null) writeNickNameField(nickName, _oprot)
    if (gender ne null) writeGenderField(gender, _oprot)
    if (city ne null) writeCityField(city, _oprot)
    if (province ne null) writeProvinceField(province, _oprot)
    if (country ne null) writeCountryField(country, _oprot)
    if (avatarUrl ne null) writeAvatarUrlField(avatarUrl, _oprot)
    if (phoneNumber ne null) writePhoneNumberField(phoneNumber, _oprot)
    if (friendIds ne null) writeFriendIdsField(friendIds, _oprot)
    if (source ne null) writeSourceField(source, _oprot)
    if (fromType ne null) writeFromTypeField(fromType, _oprot)
    if (code ne null) writeCodeField(code, _oprot)
    writeRtypeField(rtype, _oprot)
    if (_passthroughFields.nonEmpty) {
      _passthroughFields.values.foreach { _.write(_oprot) }
    }
    _oprot.writeFieldStop()
    _oprot.writeStructEnd()
  }

  def copy(
            id: Long = this.id,
            uuid: String = this.uuid,
            openId: String = this.openId,
            appOpendId: String = this.appOpendId,
            h5OpendId: String = this.h5OpendId,
            unionId: String = this.unionId,
            createdAt: Long = this.createdAt,
            updatedAt: Long = this.updatedAt,
            status: com.ag.game.quiz.idl.thriftscala.UserStatus = this.status,
            nickName: String = this.nickName,
            gender: com.ag.game.quiz.idl.thriftscala.Gender = this.gender,
            city: String = this.city,
            province: String = this.province,
            country: String = this.country,
            avatarUrl: String = this.avatarUrl,
            phoneNumber: String = this.phoneNumber,
            friendIds: Seq[Long] = this.friendIds,
            source: com.ag.game.quiz.idl.thriftscala.UserSource = this.source,
            fromType: com.ag.game.quiz.idl.thriftscala.UserFromType = this.fromType,
            code: String = this.code,
            rtype: Int = this.rtype,
            _passthroughFields: immutable$Map[Short, TFieldBlob] = this._passthroughFields
          ): User =
    new Immutable(
      id,
      uuid,
      openId,
      appOpendId,
      h5OpendId,
      unionId,
      createdAt,
      updatedAt,
      status,
      nickName,
      gender,
      city,
      province,
      country,
      avatarUrl,
      phoneNumber,
      friendIds,
      source,
      fromType,
      code,
      rtype,
      _passthroughFields
    )

  override def canEqual(other: Any): Boolean = other.isInstanceOf[User]

  private def _equals(x: User, y: User): Boolean =
    x.productArity == y.productArity &&
      x.productIterator.sameElements(y.productIterator)

  override def equals(other: Any): Boolean =
    canEqual(other) &&
      _equals(this, other.asInstanceOf[User]) &&
      _passthroughFields == other.asInstanceOf[User]._passthroughFields

  override def hashCode: Int = _root_.scala.runtime.ScalaRunTime._hashCode(this)

  override def toString: String = _root_.scala.runtime.ScalaRunTime._toString(this)


  override def productArity: Int = 21

  override def productElement(n: Int): Any = n match {
    case 0 => this.id
    case 1 => this.uuid
    case 2 => this.openId
    case 3 => this.appOpendId
    case 4 => this.h5OpendId
    case 5 => this.unionId
    case 6 => this.createdAt
    case 7 => this.updatedAt
    case 8 => this.status
    case 9 => this.nickName
    case 10 => this.gender
    case 11 => this.city
    case 12 => this.province
    case 13 => this.country
    case 14 => this.avatarUrl
    case 15 => this.phoneNumber
    case 16 => this.friendIds
    case 17 => this.source
    case 18 => this.fromType
    case 19 => this.code
    case 20 => this.rtype
    case _ => throw new IndexOutOfBoundsException(n.toString)
  }

  override def productPrefix: String = "User"

  def _codec: ThriftStructCodec3[User] = User
}


